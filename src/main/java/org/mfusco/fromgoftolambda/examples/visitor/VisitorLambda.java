package org.mfusco.fromgoftolambda.examples.visitor;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;

import static org.mfusco.fromgoftolambda.examples.visitor.Elements.circleElement;
import static org.mfusco.fromgoftolambda.examples.visitor.Elements.rectangleElement;
import static org.mfusco.fromgoftolambda.examples.visitor.Elements.squareElement;

public class VisitorLambda {


    public static class Square {
        final double side;

        public Square(double side) {
            this.side = side;
        }
    }

    public static class Circle {
        final double radius;

        public Circle(double radius) {
            this.radius = radius;
        }
    }

    public static class Rectangle {
        final double weidht;
        final double height;

        public Rectangle( double weidht, double height ) {
            this.weidht = weidht;
            this.height = height;
        }
    }

    @org.derive4j.Data
    // see the generated "Elements" class for constructors (https://gist.github.com/jbgi/393f621decdeb1374b1f3356b2d140b6)
    interface Element {
        // we could have used the same visitor interface as in gof visitor... but let's go with an equivalent catamorphism definition:
        <T> T match( Function<Square, T>    squareElement,
                     Function<Circle, T>    circleElement,
                     Function<Rectangle, T> rectangleElement );
    }


    // like with the visitor pattern, pattern matching synthax ensure that all 3 cases are handled:

    static Function<Element, Double> areaVisitor = element -> element.match(
              s -> s.side * s.side,
              c -> Math.PI * c.radius * c.radius,
              r -> r.height * r.weidht
    );

    // or using the equivalent syntax generated by derive4j:
    static Function<Element, Double> perimeterVisitor = Elements.cases()
            .squareElement(    s -> 4 * s.side )
            .circleElement(    c -> 2 * Math.PI * c.radius )
            .rectangleElement( r -> 2 * r.height + 2 * r.weidht );

    public static void main( String[] args ) {
        List<Element> figures = Arrays.asList( circleElement(new Circle( 4 )), squareElement(new Square( 5 )), rectangleElement(new Rectangle( 6, 7 )) );

        double totalArea = figures.stream().map( areaVisitor ).reduce( 0.0, (v1, v2) -> v1 + v2 );
        System.out.println("Total area = " + totalArea);

        double totalPerimeter = figures.stream().map( perimeterVisitor ).reduce( 0.0, (v1, v2) -> v1 + v2 );
        System.out.println("Total perimeter = " + totalPerimeter);
    }
}
